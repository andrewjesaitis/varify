{"name":"Varify","tagline":"Clinical DNA Sequencing Analysis and Data Warehouse","body":"# Varify Development\r\n\r\n##Need some help?\r\nJoin our chat room and speak with our dev team: http://www.hipchat.com/gZcKr0p3y\r\n\r\n## Dependencies\r\n\r\nListed are the download links to each dependency, however most OSes have a\r\npackage manager or binaries that can be easily installed. Most of the below\r\nlinks describe alternate download and install methods.\r\n\r\nOn Mac OS X, [Homebrew](http://mxcl.github.com/homebrew/) is the recommended\r\nway to install most of these of these libraries.\r\n\r\n- [Python 2.7](http://python.org/download/releases/2.7.3/)\r\n- [Ruby 1.8.7+](http://www.ruby-lang.org/en/downloads/)\r\n- [RubyGems 1.3+](http://rubygems.org/pages/download)\r\n- [NodeJS 0.8+](http://nodejs.org/download/)\r\n- [Redis 2.6+](http://redis.io/download)\r\n- [PostgreSQL 9.2+](http://www.postgresql.org/download/)\r\n- [Memcached](http://memcached.org)\r\n- Ruby Sass gem\r\n- Node CoffeeScript module\r\n\r\nInstall CoffeeScript:\r\n\r\n```bash\r\nnpm install -g coffee-script\r\n```\r\n\r\nInstall the Sass gem:\r\n\r\n```bash\r\ngem install sass\r\n```\r\n\r\n### Deployment Dependencies\r\n\r\nNote, the `INSTALL` file contains instructions for setting up a server running\r\nRedHat Enterprise Linux Server 6.3.\r\n\r\n- [nginx](http://nginx.org/en/download.html)\r\n- [supervisord](http://supervisord.org)\r\n\r\n## Setup & Install\r\n\r\nDistribute, Pip and virtualenv are required. To check if you have them:\r\n\r\n```bash\r\nwhich pip easy_install virtualenv\r\n```\r\n\r\nIf nothing prints out, install the libraries corresponding to the commands\r\nbelow:\r\n\r\n_Watch out for sudo! The root user `$PATH` most likely does not include\r\n`/usr/local/bin`. If you did not install Python through your distro's package\r\nmanager, use the absolute path to the new Python binary to prevent installing\r\nthe above libraries with the wrong version (like Python 2.4 on CentOS 5),\r\ne.g. `/usr/local/bin/python2.7`._\r\n\r\n```bash\r\ncurl http://python-distribute.org/distribute_setup.py | python\r\ncurl https://raw.github.com/pypa/pip/master/contrib/get-pip.py | python\r\npip install virtualenv\r\n```\r\n\r\nCreate your virtualenv:\r\n\r\n```bash\r\nvirtualenv varify-env\r\ncd varify-env\r\n. bin/activate\r\n```\r\n\r\nClone the repo:\r\n\r\n```bash\r\ngit clone https://github.com/cbmi/varify.git\r\ncd varify\r\n```\r\n\r\nInstall the requirements:\r\n\r\n```bash\r\npip install -r requirements.txt\r\n```\r\n\r\n[Start the postgres server](http://www.postgresql.org/docs/9.2/static/server-start.html). This *may* look something like:\r\n```\r\ninitdb /usr/local/var/postgres -E utf8\r\n\r\npg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start\r\n```\r\n\r\nCreate the varify database, you might first want to make sure you are a user\r\n```\r\ncreateuser --user postgres -s -r yourusername\r\ncreatedb varify\r\n\r\n```\r\n\r\nStart memcached\r\n```bash\r\nmemcached -d\r\n```\r\n\r\nStart redis\r\n```\r\nredis-server /usr/local/etc/redis.conf\r\n```\r\n\r\nIf you are on a Mac, you will need to start postfix to allow SMTP:\r\n```\r\nsudo postfix start\r\n```\r\n\r\nInitialize the Django and Varify schemas\r\n```\r\n./bin/manage.py syncdb\r\n./bin/manage.py migrate\r\n```\r\n\r\nLoad the initial data\r\n```\r\n./bin/manage.py loaddata ./varify/fixtures/*\r\n```\r\n\r\nThen either start the built-in Django server:\r\n\r\n```bash\r\n./bin/manage.py runserver\r\n```\r\n\r\nor run a `uwsgi` process:\r\n\r\n```bash\r\nuwsgi --ini server/uwsgi/local.ini --protocol http --socket 127.0.0.1:8000 --check-static _site\r\n```\r\n\r\n## Makefile Commands\r\n\r\n- `build` - builds and initializes all submodules, compiles SCSS and\r\n    CoffeeScript and optimizes JavaScript\r\n- `watch` - watches the CoffeeScript and SCSS files in the background\r\nfor changes and automatically recompiles the files\r\n- `unwatch` - stops watching the CoffeeScript and SCSS files\r\n- `sass` - one-time explicit recompilation of SCSS files\r\n- `coffee` - one-time explicit recompilation of CoffeeScript files\r\n\r\n## Fabfile Commands\r\n\r\n- `deploy:[<branch>@]<commit>` - deploy a specific Git commit or tag\r\n\r\n\r\n## Local Settings\r\n\r\n`local_settings.py` is intentionally not versioned (via `.gitignore`). It should\r\ncontain any environment-specific settings and/or sensitive settings such as\r\npasswords, the `SECRET_KEY` and other information that should not be in version\r\ncontrol. Defining `local_settings.py` is not mandatory but will warn if it does\r\nnot exist.\r\n\r\n## CoffeeScript & Sass Development\r\n\r\nCoffeeScript is lovely. The flow is simple:\r\n\r\n- write some CoffeeScript which automatically gets compiled in JavaScript\r\n(by doing `make watch`)\r\n- when ready to test non-`DEBUG` mode, run `make optimize`\r\n\r\nThe `app.build.js` file will need to be updated to define which modules\r\nshould be compiled to single files. It is recommended to take a tiered\r\napproach to reduce overall file size across pages and increase cache potential\r\nfor libraries that won't change for a while, for example jQuery.\r\n\r\n[Sass](http://sass-lang.com/) is awesome. SCSS is a superset of CSS so you can\r\nuse as much or as little SCSS syntax as you want. It is recommended to write\r\nall of your CSS rules as SCSS, since at the very least the Sass minifier can\r\nbe taken advantage of.\r\n\r\nExecute the following commands to begin watching the static files and\r\ncollect the files (using Django's collectstatic command):\r\n\r\n```bash\r\nmake sass coffee collect watch\r\n```\r\n\r\n_Note, the `sass` and `coffee` targets are called first to ensure the compiled\r\nfiles exist before attempting to collect them._\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}